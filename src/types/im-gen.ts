/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/": {
    get: {
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/comment": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comment.id"];
          created_by?: parameters["rowFilter.comment.created_by"];
          comment?: parameters["rowFilter.comment.comment"];
          incident_id?: parameters["rowFilter.comment.incident_id"];
          hypothesis_id?: parameters["rowFilter.comment.hypothesis_id"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["comment"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** comment */
          comment?: definitions["comment"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comment.id"];
          created_by?: parameters["rowFilter.comment.created_by"];
          comment?: parameters["rowFilter.comment.comment"];
          incident_id?: parameters["rowFilter.comment.incident_id"];
          hypothesis_id?: parameters["rowFilter.comment.hypothesis_id"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.comment.id"];
          created_by?: parameters["rowFilter.comment.created_by"];
          comment?: parameters["rowFilter.comment.comment"];
          incident_id?: parameters["rowFilter.comment.incident_id"];
          hypothesis_id?: parameters["rowFilter.comment.hypothesis_id"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        body: {
          /** comment */
          comment?: definitions["comment"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/evidence": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.evidence.id"];
          description?: parameters["rowFilter.evidence.description"];
          hypothesis_id?: parameters["rowFilter.evidence.hypothesis_id"];
          created_by?: parameters["rowFilter.evidence.created_by"];
          type?: parameters["rowFilter.evidence.type"];
          evidence?: parameters["rowFilter.evidence.evidence"];
          properties?: parameters["rowFilter.evidence.properties"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["evidence"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** evidence */
          evidence?: definitions["evidence"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.evidence.id"];
          description?: parameters["rowFilter.evidence.description"];
          hypothesis_id?: parameters["rowFilter.evidence.hypothesis_id"];
          created_by?: parameters["rowFilter.evidence.created_by"];
          type?: parameters["rowFilter.evidence.type"];
          evidence?: parameters["rowFilter.evidence.evidence"];
          properties?: parameters["rowFilter.evidence.properties"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.evidence.id"];
          description?: parameters["rowFilter.evidence.description"];
          hypothesis_id?: parameters["rowFilter.evidence.hypothesis_id"];
          created_by?: parameters["rowFilter.evidence.created_by"];
          type?: parameters["rowFilter.evidence.type"];
          evidence?: parameters["rowFilter.evidence.evidence"];
          properties?: parameters["rowFilter.evidence.properties"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        body: {
          /** evidence */
          evidence?: definitions["evidence"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/goose_db_version": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.goose_db_version.id"];
          version_id?: parameters["rowFilter.goose_db_version.version_id"];
          is_applied?: parameters["rowFilter.goose_db_version.is_applied"];
          tstamp?: "TimeStampStr";
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["goose_db_version"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** goose_db_version */
          goose_db_version?: definitions["goose_db_version"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.goose_db_version.id"];
          version_id?: parameters["rowFilter.goose_db_version.version_id"];
          is_applied?: parameters["rowFilter.goose_db_version.is_applied"];
          tstamp?: "TimeStampStr";
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.goose_db_version.id"];
          version_id?: parameters["rowFilter.goose_db_version.version_id"];
          is_applied?: parameters["rowFilter.goose_db_version.is_applied"];
          tstamp?: "TimeStampStr";
        };
        body: {
          /** goose_db_version */
          goose_db_version?: definitions["goose_db_version"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/hypothesis": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.hypothesis.id"];
          created_by?: parameters["rowFilter.hypothesis.created_by"];
          incident_id?: parameters["rowFilter.hypothesis.incident_id"];
          parent_id?: parameters["rowFilter.hypothesis.parent_id"];
          type?: parameters["rowFilter.hypothesis.type"];
          title?: parameters["rowFilter.hypothesis.title"];
          status?: parameters["rowFilter.hypothesis.status"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["hypothesis"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** hypothesis */
          hypothesis?: definitions["hypothesis"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.hypothesis.id"];
          created_by?: parameters["rowFilter.hypothesis.created_by"];
          incident_id?: parameters["rowFilter.hypothesis.incident_id"];
          parent_id?: parameters["rowFilter.hypothesis.parent_id"];
          type?: parameters["rowFilter.hypothesis.type"];
          title?: parameters["rowFilter.hypothesis.title"];
          status?: parameters["rowFilter.hypothesis.status"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.hypothesis.id"];
          created_by?: parameters["rowFilter.hypothesis.created_by"];
          incident_id?: parameters["rowFilter.hypothesis.incident_id"];
          parent_id?: parameters["rowFilter.hypothesis.parent_id"];
          type?: parameters["rowFilter.hypothesis.type"];
          title?: parameters["rowFilter.hypothesis.title"];
          status?: parameters["rowFilter.hypothesis.status"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        body: {
          /** hypothesis */
          hypothesis?: definitions["hypothesis"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/incident": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.incident.id"];
          title?: parameters["rowFilter.incident.title"];
          created_by?: parameters["rowFilter.incident.created_by"];
          commander_id?: parameters["rowFilter.incident.commander_id"];
          communicator_id?: parameters["rowFilter.incident.communicator_id"];
          severity?: parameters["rowFilter.incident.severity"];
          description?: parameters["rowFilter.incident.description"];
          type?: parameters["rowFilter.incident.type"];
          status?: parameters["rowFilter.incident.status"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["incident"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** incident */
          incident?: definitions["incident"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.incident.id"];
          title?: parameters["rowFilter.incident.title"];
          created_by?: parameters["rowFilter.incident.created_by"];
          commander_id?: parameters["rowFilter.incident.commander_id"];
          communicator_id?: parameters["rowFilter.incident.communicator_id"];
          severity?: parameters["rowFilter.incident.severity"];
          description?: parameters["rowFilter.incident.description"];
          type?: parameters["rowFilter.incident.type"];
          status?: parameters["rowFilter.incident.status"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.incident.id"];
          title?: parameters["rowFilter.incident.title"];
          created_by?: parameters["rowFilter.incident.created_by"];
          commander_id?: parameters["rowFilter.incident.commander_id"];
          communicator_id?: parameters["rowFilter.incident.communicator_id"];
          severity?: parameters["rowFilter.incident.severity"];
          description?: parameters["rowFilter.incident.description"];
          type?: parameters["rowFilter.incident.type"];
          status?: parameters["rowFilter.incident.status"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        body: {
          /** incident */
          incident?: definitions["incident"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/person": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.person.id"];
          name?: parameters["rowFilter.person.name"];
          avatar?: parameters["rowFilter.person.avatar"];
          team?: parameters["rowFilter.person.team"];
          organization?: parameters["rowFilter.person.organization"];
          title?: parameters["rowFilter.person.title"];
          email?: parameters["rowFilter.person.email"];
          phone?: parameters["rowFilter.person.phone"];
          properties?: parameters["rowFilter.person.properties"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["person"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** person */
          person?: definitions["person"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.person.id"];
          name?: parameters["rowFilter.person.name"];
          avatar?: parameters["rowFilter.person.avatar"];
          team?: parameters["rowFilter.person.team"];
          organization?: parameters["rowFilter.person.organization"];
          title?: parameters["rowFilter.person.title"];
          email?: parameters["rowFilter.person.email"];
          phone?: parameters["rowFilter.person.phone"];
          properties?: parameters["rowFilter.person.properties"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.person.id"];
          name?: parameters["rowFilter.person.name"];
          avatar?: parameters["rowFilter.person.avatar"];
          team?: parameters["rowFilter.person.team"];
          organization?: parameters["rowFilter.person.organization"];
          title?: parameters["rowFilter.person.title"];
          email?: parameters["rowFilter.person.email"];
          phone?: parameters["rowFilter.person.phone"];
          properties?: parameters["rowFilter.person.properties"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        body: {
          /** person */
          person?: definitions["person"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/responder": {
    get: {
      parameters: {
        query: {
          id?: parameters["rowFilter.responder.id"];
          incident_id?: parameters["rowFilter.responder.incident_id"];
          type?: parameters["rowFilter.responder.type"];
          person_id?: parameters["rowFilter.responder.person_id"];
          properties?: parameters["rowFilter.responder.properties"];
          acknowledge_time?: "TimeStampStr";
          signoff_time?: "TimeStampStr";
          created_by?: parameters["rowFilter.responder.created_by"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
          /** Filtering Columns */
          select?: parameters["select"];
          /** Ordering */
          order?: parameters["order"];
          /** Limiting and Pagination */
          offset?: parameters["offset"];
          /** Limiting and Pagination */
          limit?: parameters["limit"];
        };
        header: {
          /** Limiting and Pagination */
          Range?: parameters["range"];
          /** Limiting and Pagination */
          "Range-Unit"?: parameters["rangeUnit"];
          /** Preference */
          Prefer?: parameters["preferCount"];
        };
      };
      responses: {
        /** OK */
        200: {
          schema: definitions["responder"][];
        };
        /** Partial Content */
        206: unknown;
      };
    };
    post: {
      parameters: {
        body: {
          /** responder */
          responder?: definitions["responder"];
        };
        query: {
          /** Filtering Columns */
          select?: parameters["select"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** Created */
        201: unknown;
      };
    };
    delete: {
      parameters: {
        query: {
          id?: parameters["rowFilter.responder.id"];
          incident_id?: parameters["rowFilter.responder.incident_id"];
          type?: parameters["rowFilter.responder.type"];
          person_id?: parameters["rowFilter.responder.person_id"];
          properties?: parameters["rowFilter.responder.properties"];
          acknowledge_time?: "TimeStampStr";
          signoff_time?: "TimeStampStr";
          created_by?: parameters["rowFilter.responder.created_by"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
    patch: {
      parameters: {
        query: {
          id?: parameters["rowFilter.responder.id"];
          incident_id?: parameters["rowFilter.responder.incident_id"];
          type?: parameters["rowFilter.responder.type"];
          person_id?: parameters["rowFilter.responder.person_id"];
          properties?: parameters["rowFilter.responder.properties"];
          acknowledge_time?: "TimeStampStr";
          signoff_time?: "TimeStampStr";
          created_by?: parameters["rowFilter.responder.created_by"];
          created_at?: "TimeStampStr";
          updated_at?: "TimeStampStr";
        };
        body: {
          /** responder */
          responder?: definitions["responder"];
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferReturn"];
        };
      };
      responses: {
        /** No Content */
        204: never;
      };
    };
  };
  "/rpc/uuid_to_ulid": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: uuid */
            id: string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_pub_encrypt_bytea": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/digest": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/encrypt_iv": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/decrypt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/gen_random_bytes": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            "": number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_sym_encrypt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_sym_decrypt_bytea": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/gen_salt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: integer */
            "": number;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_sym_decrypt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/gen_random_uuid": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_key_id": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: bytea */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/generate_ulid": {
    post: {
      parameters: {
        body: {
          args: { [key: string]: unknown };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/hmac": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/encrypt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/armor": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text[] */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_sym_encrypt_bytea": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/crypt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_armor_headers": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_pub_encrypt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_pub_decrypt_bytea": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/pgp_pub_decrypt": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/dearmor": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
  "/rpc/decrypt_iv": {
    post: {
      parameters: {
        body: {
          args: {
            /** Format: text */
            "": string;
          };
        };
        header: {
          /** Preference */
          Prefer?: parameters["preferParams"];
        };
      };
      responses: {
        /** OK */
        200: unknown;
      };
    };
  };
}

export interface definitions {
  comment: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.generate_ulid()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    created_by: ["id", "person"];
    /** Format: text */
    comment: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `incident.id`.<fk table='incident' column='id'/>
     */
    incident_id: ["id", "incident"];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `hypothesis.id`.<fk table='hypothesis' column='id'/>
     */
    hypothesis_id?: ["id", "hypothesis"];
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: "TimeStampStr";
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: "TimeStampStr";
  };
  evidence: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.generate_ulid()
     */
    id: string;
    /** Format: text */
    description: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `hypothesis.id`.<fk table='hypothesis' column='id'/>
     */
    hypothesis_id: ["id", "hypothesis"];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    created_by: ["id", "person"];
    /** Format: text */
    type: string;
    /** Format: jsonb */
    evidence?: unknown;
    /** Format: jsonb */
    properties?: unknown;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: "TimeStampStr";
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: "TimeStampStr";
  };
  goose_db_version: {
    /**
     * Format: integer
     * @description Note:
     * This is a Primary Key.<pk/>
     */
    id: number;
    /** Format: bigint */
    version_id: number;
    /** Format: boolean */
    is_applied: boolean;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    tstamp?: "TimeStampStr";
  };
  hypothesis: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.generate_ulid()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    created_by: ["id", "person"];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `incident.id`.<fk table='incident' column='id'/>
     */
    incident_id: ["id", "incident"];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `hypothesis.id`.<fk table='hypothesis' column='id'/>
     */
    parent_id?: ["id", "hypothesis"];
    /** Format: text */
    type: string;
    /** Format: text */
    title: string;
    /** @enum {string} */
    status: "open" | "closed";
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: "TimeStampStr";
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: "TimeStampStr";
  };
  incident: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.generate_ulid()
     */
    id: string;
    /** Format: text */
    title: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    created_by: ["id", "person"];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    commander_id?: ["id", "person"];
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    communicator_id?: ["id", "person"];
    /** Format: integer */
    severity: number;
    /** Format: text */
    description: string;
    /** Format: text */
    type: string;
    /** Format: text */
    status: string;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: "TimeStampStr";
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: "TimeStampStr";
  };
  person: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.generate_ulid()
     */
    id: string;
    /** Format: text */
    name: string;
    /** Format: text */
    avatar?: string;
    /** Format: text */
    team?: string;
    /** Format: text */
    organization?: string;
    /** Format: text */
    title?: string;
    /** Format: text */
    email?: string;
    /** Format: text */
    phone?: string;
    /** Format: jsonb */
    properties?: unknown;
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: "TimeStampStr";
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: "TimeStampStr";
  };
  responder: {
    /**
     * Format: uuid
     * @description Note:
     * This is a Primary Key.<pk/>
     * @default public.generate_ulid()
     */
    id: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `incident.id`.<fk table='incident' column='id'/>
     */
    incident_id: ["id", "incident"];
    /** Format: text */
    type: string;
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    person_id?: ["id", "person"];
    /** Format: json */
    properties?: unknown;
    /** Format: timestamp without time zone */
    acknowledge_time?: "TimeStampStr";
    /** Format: timestamp without time zone */
    signoff_time?: "TimeStampStr";
    /**
     * Format: uuid
     * @description Note:
     * This is a Foreign Key to `person.id`.<fk table='person' column='id'/>
     */
    created_by: ["id", "person"];
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    created_at: "TimeStampStr";
    /**
     * Format: timestamp without time zone
     * @default now()
     */
    updated_at: "TimeStampStr";
  };
}

export interface parameters {
  /**
   * @description Preference
   * @enum {string}
   */
  preferParams: "params=single-object";
  /**
   * @description Preference
   * @enum {string}
   */
  preferReturn: "return=representation" | "return=minimal" | "return=none";
  /**
   * @description Preference
   * @enum {string}
   */
  preferCount: "count=none";
  /** @description Filtering Columns */
  select: string;
  /** @description On Conflict */
  on_conflict: string;
  /** @description Ordering */
  order: string;
  /** @description Limiting and Pagination */
  range: string;
  /**
   * @description Limiting and Pagination
   * @default items
   */
  rangeUnit: string;
  /** @description Limiting and Pagination */
  offset: string;
  /** @description Limiting and Pagination */
  limit: string;
  /** @description comment */
  "body.comment": definitions["comment"];
  /** Format: uuid */
  "rowFilter.comment.id": string;
  /** Format: uuid */
  "rowFilter.comment.created_by": string;
  /** Format: text */
  "rowFilter.comment.comment": string;
  /** Format: uuid */
  "rowFilter.comment.incident_id": string;
  /** Format: uuid */
  "rowFilter.comment.hypothesis_id": string;
  /** Format: timestamp without time zone */
  "rowFilter.comment.created_at": "TimeStampStr";
  /** Format: timestamp without time zone */
  "rowFilter.comment.updated_at": "TimeStampStr";
  /** @description evidence */
  "body.evidence": definitions["evidence"];
  /** Format: uuid */
  "rowFilter.evidence.id": string;
  /** Format: text */
  "rowFilter.evidence.description": string;
  /** Format: uuid */
  "rowFilter.evidence.hypothesis_id": string;
  /** Format: uuid */
  "rowFilter.evidence.created_by": string;
  /** Format: text */
  "rowFilter.evidence.type": string;
  /** Format: jsonb */
  "rowFilter.evidence.evidence": string;
  /** Format: jsonb */
  "rowFilter.evidence.properties": string;
  /** Format: timestamp without time zone */
  "rowFilter.evidence.created_at": "TimeStampStr";
  /** Format: timestamp without time zone */
  "rowFilter.evidence.updated_at": "TimeStampStr";
  /** @description goose_db_version */
  "body.goose_db_version": definitions["goose_db_version"];
  /** Format: integer */
  "rowFilter.goose_db_version.id": string;
  /** Format: bigint */
  "rowFilter.goose_db_version.version_id": string;
  /** Format: boolean */
  "rowFilter.goose_db_version.is_applied": string;
  /** Format: timestamp without time zone */
  "rowFilter.goose_db_version.tstamp": "TimeStampStr";
  /** @description hypothesis */
  "body.hypothesis": definitions["hypothesis"];
  /** Format: uuid */
  "rowFilter.hypothesis.id": string;
  /** Format: uuid */
  "rowFilter.hypothesis.created_by": string;
  /** Format: uuid */
  "rowFilter.hypothesis.incident_id": string;
  /** Format: uuid */
  "rowFilter.hypothesis.parent_id": string;
  /** Format: text */
  "rowFilter.hypothesis.type": string;
  /** Format: text */
  "rowFilter.hypothesis.title": string;
  /** Format: text */
  "rowFilter.hypothesis.status": string;
  /** Format: timestamp without time zone */
  "rowFilter.hypothesis.created_at": "TimeStampStr";
  /** Format: timestamp without time zone */
  "rowFilter.hypothesis.updated_at": "TimeStampStr";
  /** @description incident */
  "body.incident": definitions["incident"];
  /** Format: uuid */
  "rowFilter.incident.id": string;
  /** Format: text */
  "rowFilter.incident.title": string;
  /** Format: uuid */
  "rowFilter.incident.created_by": string;
  /** Format: uuid */
  "rowFilter.incident.commander_id": string;
  /** Format: uuid */
  "rowFilter.incident.communicator_id": string;
  /** Format: integer */
  "rowFilter.incident.severity": string;
  /** Format: text */
  "rowFilter.incident.description": string;
  /** Format: text */
  "rowFilter.incident.type": string;
  /** Format: text */
  "rowFilter.incident.status": string;
  /** Format: timestamp without time zone */
  "rowFilter.incident.created_at": "TimeStampStr";
  /** Format: timestamp without time zone */
  "rowFilter.incident.updated_at": "TimeStampStr";
  /** @description person */
  "body.person": definitions["person"];
  /** Format: uuid */
  "rowFilter.person.id": string;
  /** Format: text */
  "rowFilter.person.name": string;
  /** Format: text */
  "rowFilter.person.avatar": string;
  /** Format: text */
  "rowFilter.person.team": string;
  /** Format: text */
  "rowFilter.person.organization": string;
  /** Format: text */
  "rowFilter.person.title": string;
  /** Format: text */
  "rowFilter.person.email": string;
  /** Format: text */
  "rowFilter.person.phone": string;
  /** Format: jsonb */
  "rowFilter.person.properties": string;
  /** Format: timestamp without time zone */
  "rowFilter.person.created_at": "TimeStampStr";
  /** Format: timestamp without time zone */
  "rowFilter.person.updated_at": "TimeStampStr";
  /** @description responder */
  "body.responder": definitions["responder"];
  /** Format: uuid */
  "rowFilter.responder.id": string;
  /** Format: uuid */
  "rowFilter.responder.incident_id": string;
  /** Format: text */
  "rowFilter.responder.type": string;
  /** Format: uuid */
  "rowFilter.responder.person_id": string;
  /** Format: json */
  "rowFilter.responder.properties": string;
  /** Format: timestamp without time zone */
  "rowFilter.responder.acknowledge_time": "TimeStampStr";
  /** Format: timestamp without time zone */
  "rowFilter.responder.signoff_time": "TimeStampStr";
  /** Format: uuid */
  "rowFilter.responder.created_by": string;
  /** Format: timestamp without time zone */
  "rowFilter.responder.created_at": "TimeStampStr";
  /** Format: timestamp without time zone */
  "rowFilter.responder.updated_at": "TimeStampStr";
}

export interface operations {}

export interface external {}
